<?php
/**
 * @file
 * Obiba Agate Module.
 *
 * Copyright (c) 2015 OBiBa. All rights reserved.
 * This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_menu().
 */
function obiba_agate_menu() {
  $items = array();
  $items['admin/config/obiba-agate'] = array(
    'title' => 'OBiBa Agate',
    'description' => 'Configure Agate',
    'weight' => -99,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
  );

  $items['admin/config/obiba-agate/agate-settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure OBiBa central authentication services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('obiba_agate_admin_settings'),
    'access arguments' => array('administer obiba agate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'obiba_agate.admin.inc',
    'weight' => 0,
  );

  $items['admin/config/obiba-agate/agate-pages'] = array(
    'title' => 'Pages settings',
    'description' => 'Configure Agate pages content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('obiba_agate_admin_pages_settings'),
    'access arguments' => array('administer obiba agate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'obiba_agate_pages.admin.inc',
    'weight' => 1,
  );

  $items['agate/confirm'] = array(
    'title' => 'Password form reset/confirmation',
    'description' => 'Password form reset/confirmation',
    'page callback' => 'obiba_agate_password_form_process',
    'access callback' => TRUE,
    'file' => 'obiba_agate.confirmation.inc',
  );
  $items['agate/reset_password'] = array(
    'title' => 'Password form reset',
    'description' => 'Password form reset',
    'page callback' => 'obiba_agate_password_form_process',
    'access callback' => TRUE,
    'file' => 'obiba_agate.confirmation.inc',
  );

  $items[MicaClientPathProvider::AGATE_PROFILE] = array(
    'access callback' => TRUE,
    'title' => 'User Profile',
    'description' => 'User Profile',
    'page callback' => 'obiba_agate_angular_profile_page',
    'access callback' => 'obiba_agate_angular_can_edit_profile',
  );
  $items[MicaClientPathProvider::AGATE_REGISTER] = array(
    'access callback' => TRUE,
    'title' => 'Register User',
    'description' => 'Register User',
    'access callback' => 'obiba_agate_singup_access',
    'page callback' => 'obiba_agate_angular_register_page',
  );

  $items['agate/send_password/%'] = array(
    'title' => 'Send reset/confirmation password',
    'description' => 'Send the reset/confirmation registration Agate User',
    'page callback' => 'obiba_agate_send_password_user',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'obiba_agate.confirmation.inc',
  );

  $items['agate/agate_user_join/ws'] = array(
    'title' => 'Agate User',
    'description' => 'Agate User Profile',
    'page callback' => 'obiba_agate_register_user',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
  );
  $items['agate/agate-form/ws'] = array(
    'page callback' => 'obiba_agate_schema_form',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
    'type' => MENU_CALLBACK
  );
  $items['agate/auth/providers/ws'] = array(
    'page callback' => 'obiba_agate_get_providers',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
    'type' => MENU_CALLBACK
  );
  $items['agate/agate-user-profile/ws'] = array(
    'page callback' => 'obiba_agate_user_profile',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
    'type' => MENU_CALLBACK
  );
  $items['agate/agate-user-update-password/ws'] = array(
    'page callback' => 'obiba_agate_user_profile_update_password',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
    'type' => MENU_CALLBACK
  );

  $items['admin/config/obiba-agate/agate-fields'] = array(
    'title' => 'Users Fields setting',
    'description' => 'Configure Drupal users field to synchronise to Agate server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('obiba_agate_fields_admin_settings'),
    'access arguments' => array('administer obiba agate'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'obiba_agate.admin.inc',
    'weight' => 1,
  );

  $items['agate/config/client/ws'] = array(
    'page callback' => 'obiba_agate_get_config_client',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
    'type' => MENU_CALLBACK
  );

  $items['agate/users/_test/ws'] = array(
    'page callback' => 'obiba_agate_test_user',
    'access callback' => TRUE,
    'file' => 'obiba_agate_services.inc',
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Callback to restrict access to agate/profile page by anonymous users.
 *
 * @return bool
 */
function obiba_agate_angular_can_edit_profile(){
  global $user;
  if ($user->uid !=0 ) {
    return TRUE;
  }
  return FALSE;
}

/*
 * Make sure to logout the current user
 * */
function obiba_agate_logout_current_user(){
  // The obiba cookie has expired or was destroyed so logout
  if(isset($_SESSION[ObibaAgateClient::OBIBA_COOKIE])){
    unset($_SESSION[ObibaAgateClient::OBIBA_COOKIE]);
    unset($_SESSION[ObibaAgateClient::OBIBA_COOKIE_OBJECT]);
  }
  global $user;
  if(isset($user->name) && user_get_authmaps($user->name)){
  module_load_include('pages.inc', 'user');
  module_invoke_all('user_logout', $user);
    // Destroy the current session, and reset $user to the anonymous user.
    if(isset($user->session)){
      session_destroy();
    }
  }
}

/**
 * Apply Obiba cookie for single sign-on in other Obiba applications.
 *
 * Implements hook_preprocess_page().
 */
function obiba_agate_preprocess_page(&$variables) {
  $options = array(
    'currentPath' => current_path(),
    'confCleanPath' => !empty($GLOBALS['conf']['clean_url']) ? TRUE : FALSE,
  );
  drupal_add_js($options, 'setting');
  if (ObibaAgateClient::hasTicket()) {
    if (empty($_SESSION[ObibaAgateClient::AGATE_JUST_LOGGED_IN]) && empty($_COOKIE[ObibaAgateClient::OBIBA_COOKIE])) {
      obiba_agate_logout_current_user();
    } else {
      unset($_SESSION[ObibaAgateClient::AGATE_JUST_LOGGED_IN]);
      $cookie = $_SESSION[ObibaAgateClient::OBIBA_COOKIE_OBJECT];
      // The obiba cookie will expire with the drupal session
      $expire = 0; // expires with drupal session
      $path = empty($cookie['Path']) ? '/' : $cookie['Path'];
      $domain = empty($cookie['Domain']) ? NULL : $cookie['Domain'];
      $secure = empty($cookie['Secure']) ? FALSE : $cookie['Secure'];
      setcookie(ObibaAgateClient::OBIBA_COOKIE, $cookie[ObibaAgateClient::OBIBA_COOKIE], $expire, $path, $domain, $secure);
    }
  }
  else{
    if(isset($_COOKIE[ObibaAgateClient::OBIBA_COOKIE])){
      $agate = new ObibaAgateClient();
      // validate if ObibaSession has a correspondent ticket in agate and get the user name
      $user_name = $agate->validate($_COOKIE[ObibaAgateClient::OBIBA_COOKIE]);
      if(!empty($user_name)){
        // update/create drupal user
        obiba_agate_save_drupal_user();
        // force login the user
        user_external_login_register($user_name, 'obiba_agate');
        // have to force the browser, so the authentication take effect
        header("refresh: 0");
      }
      else{
        // if no ticket to correspondent session force logout and unset all sessions/cookies
        obiba_agate_logout_current_user();
      }
    }
  }
}

/**
 * Permission access to the registration page
 *
 */
function obiba_agate_singup_access(){
  if(!variable_get_value('access_signup_button_disabled')){
    return TRUE;
  }
  return FALSE;
}
/**
 * The page of the user registration, it load the angularJs resources.
 *
 * @return string
 *   The html template of the registration page.
 */
function obiba_agate_angular_register_page() {
  obiba_mica_app_angular_load_template_app('obiba_agate');
  drupal_set_title(variable_get_value('obiba_register_page_title'));

  return theme('obiba_agate_user-main-app');
}

/**
 * The page of the user profile form, it load the angularJs resources.
 *
 * @return string
 *   The html template of the profile page.
 */
function obiba_agate_angular_profile_page() {
  global $user;
  obiba_mica_app_angular_load_template_app('obiba_agate');
  $profile_name = !empty($user->data['real_name']) ? $user->data['real_name'] : $user->name;
  drupal_set_title(t('Profile - @profile_name', array('@profile_name' => $profile_name)));
  return theme('obiba_agate_user-main-app');
}

/**
 * Get drupal  user profile form.
 *
 * @return string
 *   The form the drupal user profile form.
 */
function obiba_agate_get_drupal_profile_form() {
  global $user;
  if(current_path() != 'agate/register' && strstr('agate/user/profile', current_path()) && !empty($user->name)){
  module_load_include('inc', 'user', 'user.pages');
  $account = user_load_by_name($user->name);
  $form_user = drupal_get_form('user_profile_form', $account);
  $output = drupal_render($form_user);
  return $output;
  }
}

/**
 * Main angular app.
 *
 * Implementation of hook_get_ng_module_to_load().
 */
function obiba_agate_get_ng_module_to_load() {
  if (in_array(current_path(), array(MicaClientPathProvider::AGATE_PROFILE))) {
    return 'mica.agateProfile';
  }
  if (current_path() == MicaClientPathProvider::AGATE_REGISTER) {
    return 'mica.agateRegister';
  }
  return FALSE;
}

/**
 * Main angular app.
 *
 * Implements hook_get_js().
 */
function obiba_agate_get_js($weight_js) {
  global $user;
  $js = array();
  $module_path = drupal_get_path('module', 'obiba_agate');
  if (current_path() == MicaClientPathProvider::AGATE_REGISTER) {
    $js = file_scan_directory($module_path . '/js/app/agate_register', '/.*\.js$/', array('key' => 'name'));
    ksort($js);
  }
  if (in_array(current_path(), array(MicaClientPathProvider::AGATE_PROFILE))) {
    $js = file_scan_directory($module_path . '/js/app/agate_profile', '/.*\.js$/', array('key' => 'name'));
    ksort($js);
  }

  foreach ($js as $file_js) {
    drupal_add_js($file_js->uri, array(
      'type' => 'file',
      'scope' => 'footer',
      'weight' => ++$weight_js,
    ));
  }
  $parameters = drupal_get_query_parameters();
  if(isset($parameters['mail'])){
    $user_to_export = array(
      'name' => $parameters['name'],
      'mail' => $parameters['mail'],
    );
  }
  $js_params = array(
    'agateParam' => array(
      'agateUrl' => variable_get_value('agate_url'),
      'userId' => !empty($user->name) ? $user->name : NULL,
      'userToExport' => !empty($user_to_export) ? $user_to_export : NULL,
      'ClientProfileEditForm' => obiba_agate_get_drupal_profile_form(),
    ),
  );
  drupal_add_js($js_params, 'setting');
  return ++$weight_js;
}

/**
 * Implements hook_theme().
 */
function obiba_agate_theme($existing, $type, $theme, $path) {
  $path_views_theme = $path . '/js/app/views';
  $path_theme = $path . '/templates';
  return array(
    'obiba_agate-user-profile-register-form' => array(
      'template' => 'obiba_agate-user-profile-register-form',
      'path' => $path_views_theme,
    ),
    'obiba_agate-user-profile-view' => array(
      'template' => 'obiba_agate-user-profile-view',
      'path' => $path_views_theme,
    ),
    'obiba_agate-user-profile-form' => array(
      'template' => 'obiba_agate-user-profile-form',
      'path' => $path_views_theme,
    ),
    'obiba-agate-user-update-password-modal' => array(
      'template' => 'obiba-agate-user-update-password-modal',
      'path' => $path_views_theme,
    ),

    'obiba_agate-user-profile-register-test-modal' => array(
      'template' => 'obiba_agate-user-profile-register-test-modal',
      'path' => $path_views_theme,
    ),
    'obiba_agate_user-form-password-confirm' => array(
      'template' => 'obiba_agate_user-form-password-confirm',
      'path' => $path_theme,
    ),
    'obiba_agate_user-form-password-reset' => array(
      'template' => 'obiba_agate_user-form-password-reset',
      'path' => $path_theme,
    ),
    'obiba_agate_user-main-app' => array(
      'template' => 'obiba_agate_user-main-app',
      'path' => $path_theme,
    ),
    'obiba_agate_table_widget_component' => array(
      'render element' => 'element'
    ),
    'user_login' => array(
      'template' => 'user-login',
      'path' => $path_theme,
      'render element' => 'form',
      'preprocess functions' => array(
        'obiba_agate_login_users_process'
      )
    ),
    'user_register_form' => array(
      'template' => 'user-register-form',
      'path' => $path_theme,
      'render element' => 'form',
    ),
    'user_pass' => array(
      'template' => 'user-pass',
      'path' => $path_theme,
      'render element' => 'form',
    )
  );
}

function obiba_agate_login_users_process(&$variables){
  global $base_url;
  $agate = new ObibaAgateClient();

  $variables['classes_array'] = array();
  $variables['attributes_array'] = array();
  $variables['title_attributes_array'] = array();
  $variables['content_attributes_array'] = array();
  $variables['providers'] = $agate->getProviders();
  $variables['base_url'] = $base_url;
}

function theme_obiba_agate_table_widget_component($vars) {
  $element = $vars['element'];
  $header = array(
    '',
    t('Agate profile Fields'),
    t('Drupal profile fields'),
    t('Enable/Disable to export'),
  );
  $rows = array();
  foreach (element_children($element) as $field) {
    $rows[] = array(
      'data' => array(
        '',
        drupal_render($element[$field]['description']),
        drupal_render($element[$field]['drupal_value']),
        drupal_render($element[$field]['enable']),
      ),
    );
  }

  $table_id = $element['#id'];
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));
  return $output;
}
/**
 * Implements hook_library().
 */
function obiba_agate_library() {
  return obiba_mica_app_angular_load_angular_library();
}

/**
 * Implements hook_library_alter().
 *
 * Angular library compatible with Jquery 1.10 .
 */
function obiba_agate_library_alter(&$javascript, $module) {
  if (in_array(current_path(), array(
    MicaClientPathProvider::AGATE_REGISTER,
    MicaClientPathProvider::AGATE_PROFILE,
  ))) {
    $path = drupal_get_path('module', 'jquery_update');
    jquery_update_jquery_replace($javascript, NULL, $path, NULL, '1.10');
  }
}

/**
 * Get schema form attribute.
 */
function obiba_agate_schema_form() {
  $agate_client = new ObibaAgateClient();
  $form = $agate_client->getConfigFormJoin();
  drupal_json_output($form);
}

/**
 * Function Call back password validation.
 *
 * Override the default drupal password validation by checking the
 * password on agate server.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function obiba_agate_user_pass_submit(array $form, array &$form_state) {
  $password_reset = FALSE;
  $name_email = $form_state['values']['name'];
  if ((!isset($form_state['uid']) || $form_state['uid'] == FALSE) && !empty($name_email)) {
    $password_reset =  obiba_agate_send_password_request(array('username' => $name_email));
  }
  /* if not agate user, check if it's a drupal User*/
  if(!$password_reset){
    /* Drupal User Validation */
    user_pass_validate($form,$form_state);
    if(isset($form_state['values']['account'])) {
      /* Drupal password reset notification */
      user_pass_submit($form, $form_state);
    }
    else{
      form_set_error('name', t('Sorry, %name is not recognized as a user name or an e-mail address.', array('%name' => $name_email)));
    }
  }
  $form_state['redirect'] = 'user';
}

/**
 * Send a password reset password to Agate server.
 *
 * The server will send a mail reset password if valid username/e-mail.
 *
 * @param array $name_email
 *   The username -  e-mail to recover.
 */
function obiba_agate_send_password_request(array $name_email) {
  $agate_client = new ObibaAgateClient();
  $response = $agate_client->passwordRequest($name_email);
  if ($response && !isset($response->message)) {
    drupal_set_message(t('Further instructions have been sent to your e-mail address.'), 'status');
  return TRUE;
  }
  else {
    if (!empty($response->message)) {
      return FALSE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function obiba_agate_form_agate_register_form_alter(&$form, &$form_state, $form_id) {
  $form['obiba_agate']['#value'] = 'obiba_agate_user_register_form';
}

/**
 * Implements hook_form_user_pass_alter().
 */
function obiba_agate_form_user_pass_alter(&$form, $form_state) {
  $form['obiba_agate']['#value'] = 'obiba_agate_user_register_form';
  $form['actions']['submit']['#value'] = variable_get_value('obiba_reset_password_button_caption');
  $form['#validate'] = array();
  /* the validation  will be performed in obiba_agate_user_pass_submit callback */
  $form['#submit'] = array(
    'obiba_agate_user_pass_submit',
  );
}

/**
 * Change the normal form login form behaviour.
 */
function obiba_agate_form_user_login_alter(&$form, $form_state) {
  unset($form['links']);
  drupal_set_title(variable_get_value('obiba_login_page_title'));
  $enable_form_tooltips = variable_get_value('enable_form_tooltips');
  if (empty($enable_form_tooltips)) {
    unset($form['name']['#description']);
    unset($form['pass']['#description']);
  }
  $form['obiba_agate']['#value'] = 'obiba_agate_user_register_form';
  $form['name']['#title'] = variable_get_value('obiba_login_username_label');
  $form['actions']['submit']['#value']
    = variable_get_value('obiba_login_button_caption');
  $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary';

  $form['#validate'] = array(
    'obiba_agate_mail_user_login_validate',
    'user_login_name_validate',
    'user_login_authenticate_validate',
    'obiba_agate_login_validate',
    'user_login_final_validate',
  );

  $parameters = drupal_get_query_parameters();
  $form['#action'] = url($_GET['q'], array(
    'query' =>
      array(
        'destination' => !empty($parameters['destination']) ? $parameters['destination'] : (strstr(current_path(), 'user') ? base_path() : current_path()),
      ),
  ));
}

/**
 * Custom validation for user login form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function obiba_agate_mail_user_login_validate(array $form, array &$form_state) {
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(
      ':name' => $form_state['values']['name'],
    ))->fetchField()
    ) {
      form_set_value($form['name'], $name, $form_state);
    }
  }
}

/**
 * Implements hook_user_profile_form_alter().
 *
 * To disable the ability to change email address and password,
 * for externally authenticated users.
 */
function obiba_agate_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    $account = $form['#user'];
    if (!empty($account->name)) {
      $authmaps = user_get_authmaps($account->name);
      if (is_array($authmaps) && array_key_exists('obiba_agate', $authmaps)) {
        $form['account']['name']['#type'] = 'hidden';
        $form['account']['mail']['#type'] = 'hidden';
        $form['account']['current_pass']['#type'] = 'hidden';
        $form['account']['pass']['#type'] = 'hidden';
        if(!empty(variable_get('obiba_agate_user_fields_mapping'))){
          foreach (variable_get('obiba_agate_user_fields_mapping') as $field){
            if(isset($form[$field['drupal_value']])){
              $form[$field['drupal_value']]['#disabled'] = TRUE;
            }
          }
        }
        if($account->data['realm'] === 'agate-user-realm'){
          $form['agate'] = array(
            '#type' => 'fieldset',
            '#title' => t('Password'),
            '#description' => t('You can request for your password to be reset.') . '<br/><br/>' . l(t('Reset password'), 'user/password', array('attributes' => array('class' => 'btn btn-default'))),
          );
        }
        $form['#submit'][] = 'obiba_agate_user_profile_form_submit';
      }
      else {
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
      }
    }

  }
  return $form;
}

/**
 * Implements hook_admin_paths_alter().
 */
function obiba_agate_admin_paths_alter(&$paths) {
  // Disable admin overlay on editing user profile, it cause bug on export user to agate  process
  $paths['user/*/edit'] = FALSE;
}

/**
 * The function call back to submit a profile user form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function obiba_agate_user_profile_form_submit($form,&$form_state) {
  $account = $form['#user'];
  if (!empty($account->name)) {
    $authmaps = user_get_authmaps($account->name);
    if (is_array($authmaps) && array_key_exists('obiba_agate', $authmaps)) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      $form_state['redirect'] = url(MicaClientPathProvider::AGATE_PROFILE,
        array(
          'fragment' => 'view',
          'absolute' => TRUE,
        ));
    }
    else{
      $form_state['redirect'] = url();array('user/' . $account->uid,
        array(
          'absolute' => TRUE,
          ));
    }
  }
}

/**
 * Implements hook_permission().
 */
function obiba_agate_permission() {
  return array(
    'administer obiba agate' => array(
      'title' => t('Administer OBiBa Agate'),
      'description' => t('Configure OBiBa Agate server and other settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_user_logout().
 */
function obiba_agate_user_logout() {
  if (!ObibaAgateClient::hasTicket()) {
    return;
  }
  $cookie = $_SESSION[ObibaAgateClient::OBIBA_COOKIE_OBJECT];
  $agate_client = new ObibaAgateClient();
  $agate_client->logout();

  $expire = 0; // expires with drupal session
  $path = empty($cookie['Path']) ? '/' : $cookie['Path'];
  $domain = empty($cookie['Domain']) ? NULL : $cookie['Domain'];
  $secure = empty($cookie['Secure']) ? FALSE : $cookie['Secure'];
  setcookie(ObibaAgateClient::OBIBA_COOKIE, '', $expire, $path, $domain, $secure);
}

/**
 * Implements hook_form_alter().
 *
 * Change the normal form login block form behaviour.
 */
function obiba_agate_form_user_login_block_alter(&$form, $form_state) {
  obiba_agate_form_user_login_alter($form, $form_state);
}

/**
 * Return the value of an attribute in an array of user info attributes.
 *
 * @param string $attribute
 *   The attribute to check.
 * @param array $user_info
 *   The user array attributes.
 *
 * @return string
 *   The value of the passed attribute.
 */
function obiba_agate_get_from_attribute($attribute, array $user_info) {
  foreach ($user_info['attributes'] as $value_attribute) {
    if ($attribute == $value_attribute['key']) {
      return $value_attribute['value'];
    }
  }
  return FALSE;
}

/**
 * Add the new users in drupal in login or register process.
 *
 * @return bool|mixed|\stdClass
 *   The created/update user object.
 */
function obiba_agate_save_drupal_user() {
  $client = new ObibaAgateClient();
  $user_info = $client->getSubject();
  $username = $user_info['username'];
  $mail = obiba_agate_get_from_attribute('email', $user_info);
  $username = valid_email_address($username) ? '' : $username;
  // Always update/create an  registered drupal user with agate user info
  // in every login.
  $user_edit = array(
    'name' => $username,
    'mail' => $mail,
    'pass' => user_password(),
    'init' => $username,
    'status' => 1,
    'access' => REQUEST_TIME,
  );

  $account = user_external_load($username);
  $groups = empty($user_info['groups']) ? NULL : $user_info['groups'];

  if ($account) {
    $roles = $account->roles;
    $account = obiba_agate_normalize_drupal_user_profile($user_info, $account);
    $user_edit['roles'] = obiba_agate_role_update($groups, $roles, NULL);
  }
  if (empty($account)) {
    $account = user_load_by_name($username);
    if($account){
      $auto_roles = variable_get('obiba_auto_assigned_role', array('mica-user'));
      $account = obiba_agate_normalize_drupal_user_profile($user_info, $account);
      $user_edit['roles'] = obiba_agate_role_update($groups, NULL, $auto_roles);
    }else{
    $account = drupal_anonymous_user();
    unset($account->uid);
    // Apply additional role.
    $auto_roles = variable_get('obiba_auto_assigned_role', array('mica-user'));
    $account = obiba_agate_normalize_drupal_user_profile($user_info, $account);
    $user_edit['roles'] = obiba_agate_role_update($groups, NULL, $auto_roles);

    }
  }
  $enabled_languages = language_list($field = 'language');
  $account->data = obiba_agate_extract_user_data($user_info);
  $account->language = "";
  /* if agate user has locale and it exist as one of enabled languages in Drupal */
  if(!empty($account->data['locale']) && isset($enabled_languages[$account->data['locale']])){
    $account->language = $account->data['locale'];
  }
  user_save($account, $user_edit);
  user_set_authmaps($account, array("authname_" . "obiba_agate" => $username));
  return $account;
}

/**
 *  Update drupal user profile
 */
function obiba_agate_normalize_drupal_user_profile($updated_profile, $account){
  $get_value = function($updated_profile, $key_field){
    return array_filter($updated_profile['attributes'], function($attribute) use($key_field){
        return ($attribute['key'] == $key_field) ? $attribute : NULL;
    });
  };
  if(!empty(variable_get('obiba_agate_user_fields_mapping'))){
    foreach (variable_get('obiba_agate_user_fields_mapping') as $key_field => $field){
      if($key_field !== 'email' || $key_field !== 'username' && $field['enable']){
        if($key_field === 'firstName'){
          $account->{$field['drupal_value']}['und'][0]['value'] = current($get_value($updated_profile, 'firstName'))['value'];
        }
        if($key_field === 'lastName'){
          $account->{$field['drupal_value']}['und'][0]['value'] = current($get_value($updated_profile, 'lastName'))['value'];
        }
        $account->{$field['drupal_value']}['und'][0]['value'] = current($get_value($updated_profile, $key_field))['value'];
      }
    }
  }
  return $account;
}

function obiba_agate_extract_user_data($user_info) {
  if (!empty($user_info['attributes']) && is_array($user_info['attributes'])) {
    $data = array();
    foreach ($user_info['attributes'] as $attribute) {
      $data[$attribute['key']] = $attribute['value'];
    }

    if (!empty($data['firstName']) && !empty($data['lastName'])) {
      // keep real_name for backward compatibility, remove this attribute once themes use firstName and lastName
      $data['real_name'] = $data['firstName'] . " " . $data['lastName'];
    }

    return $data;
  }

  return null;
}

/**
 * Update roles of the user.
 *
 * @param array $user_groups
 *   The returned agate user groups.
 * @param array $current_roles
 *   The current user roles.
 * @param array $auto_roles
 *   The roles affected automatically on create new user in drupal .
 *
 * @return array
 *   The update roles of the user.
 */
function obiba_agate_role_update(array $user_groups = NULL, array $current_roles = NULL, array $auto_roles = NULL) {
  $roles_to_add = array();
  $db_roles = user_roles();
  if (!empty($auto_roles)) {
    foreach ($db_roles as $rid => $role) {
      if (!empty($auto_roles[$rid])) {
        $current_roles[$rid] = $auto_roles[$rid];
      }
    }

  }
  // Affect roles from db_roles.
  if (!empty($user_groups)) {
    foreach ($user_groups as $group) {
      foreach ($db_roles as $rid => $role) {
        if (strcmp($group, $role) == 0) {
          $roles_to_add[$rid] = $role;
        }
      }

      // Update current roles.
      if (!empty($current_roles)) {
        foreach ($current_roles as $rid => $current_role) {
          if (strstr($current_role, 'mica')) {
            if (strcmp($group, $current_role) == 0) {
              $roles_to_add[$rid] = $current_role;
            }

          }
          // Don't modify non agate roles.
          else {
            $roles_to_add[$rid] = $current_role;
          }
        }
      }
    }
    // Create new roles from Agate user.
    $roles_to_create = array_diff($user_groups, $db_roles);

    if (!empty($roles_to_create)) {
      foreach ($roles_to_create as $role_to_create) {
        $new_role = new stdClass();
        $new_role->name = $role_to_create;
        user_role_save($new_role);
        $role = user_role_load_by_name($role_to_create);
        $roles_to_add[$role->rid] = $role_to_create;
      }

    }
  }
  return $roles_to_add;
}

/**
 * The function callback to authenticate the user overriding drupal validation..
 *
 * The obiba_agate_auth() function attempts to authenticate a user off the
 * external system using their e-mail address.
 */
function obiba_agate_login_validate($form, &$form_state) {
  $username = $form_state['values']['name'];
  $password = $form_state['values']['pass'];
  // Try to authenticate on Agate if not already Local Drupal User.
  if (!empty($username) && !empty($password) ) {
    if (obiba_agate_check_user($username, $password)) {
      $account = obiba_agate_save_drupal_user();
      $form_state['uid'] = $account->uid;
      $_SESSION[ObibaAgateClient::AGATE_JUST_LOGGED_IN] = TRUE;
    }
  }
  // Else drop through to the end and return nothing -
  // Drupal will handle the rejection for us.
}

/**
 * The function attempts to authenticate the user.
 *
 * @param string $username
 *   The username/e-mail.
 * @param string $password
 *   The password.
 *
 * @return bool
 *   TRUE/FALSE authentication
 */
function obiba_agate_check_user($username, $password) {
  try {
    $agate_client = new ObibaAgateClient();
    // Authenticate.
    return $agate_client->authenticate($username, $password);
  } catch (Exception $e) {
    watchdog('obiba_agate', 'Error %error_message.', array('%error_message' => $e->faultstring), WATCHDOG_NOTICE);
    return FALSE;
  }
}

/**
 * Update the authenticated user.
 *
 * Merge the roles from Agate to the roles found in drupal and set some
 * attributes.
 *
 * @param object $account
 *   The atdClass of authenticated user.
 */
function obiba_agate_apply_subject($account) {
  $roles = $account->roles;
  $edit = array();
  $db_roles = user_roles();

  // Authorize = apply groups.
  $agate_client = new ObibaAgateClient();
  $subject = $agate_client->getSubject();
  if (isset($subject['groups'])) {
    // Find the role id corresponding to the group name (if any).
    foreach ($subject['groups'] as $group) {
      foreach ($db_roles as $rid => $role) {
        if (strcmp($group, $role) == 0 && !isset($roles[$rid])) {
          $roles[$rid] = $role;
          $edit['roles'] = $roles;
        }
      }
    }
  }

  $edit['mail'] = obiba_agate_get_from_attribute('email', $subject);
  // Apply additional role.
  $auto_roles = variable_get('obiba_auto_assigned_role', array('mica-user'));
  $edit['roles'] = obiba_agate_role_update($subject['groups'], NULL, $auto_roles);
  if (count($edit) > 0) {
    user_save($account, $edit);
    // Reset the authmaps tab.
    obiba_agate_unset_authmaps($subject['username']);
    // Set the new authmaps entries for this user.
    user_set_authmaps($account, array("authname_" . "obiba_agate" => $subject['username']));
  }
}

/**
 * Reset the authmap tab.
 *
 * @param string $user_name
 *   The username of authenticated user..
 */
function obiba_agate_unset_authmaps($user_name) {
  db_delete('authmap')
    ->condition('authname', $user_name)
    ->condition('module', 'obiba_agate')
    ->execute();
}

/**
 * return the redirection path.
 */
function obiba_agate_redirect_path() {
  switch (variable_get_value('obiba_logout_redirection_page')){
    case '<current>' :
     return current_path();
    case '<front>' :
     return '/';
    default :
     return variable_get_value('obiba_logout_redirection_page');
  }
}
